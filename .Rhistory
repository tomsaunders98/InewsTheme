install.packages("devtools")
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(grid)
library(extrafont)
library(scales)
loadfonts(device = "win", quiet = TRUE)
inews_pal <- function() {
values <- c("#E33A11","#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#cab2d6","#6a3d9a")
max_n <- length(values)
f <- scales::manual_pal(values)
attr(f, "max_n") <- max_n
f
}
scale_colour_inews <- function(...) {
discrete_scale("colour", "inews", inews_pal(), ...)
}
scale_fill_inews <- function(...) {
discrete_scale("fill", "inews", inews_pal(), ...)
}
theme_inews <- function(base_size = 25, base_family="") {
theme_minimal(base_size = base_size, base_family = base_family) %+replace%
theme(
#Plot/general
plot.margin = margin(t = 10,r = 10, b = 10,l =10, unit = "pt"),
#Format Legend
legend.title=element_blank(),
legend.position = "top",
legend.direction = "horizontal",
legend.justification = "left",
legend.spacing = unit(0, "points"),
legend.key.size = unit(1, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.margin = margin(t = 0,r = 0, b = 0,l =0, unit = "pt"),
legend.box.margin = margin(t = 5,r = 0, b = 0,l =0, unit = "pt"),
legend.box.spacing = unit(4, "points"),
legend.text = element_text(size = rel(1.2)),
#Formatting fonts and colours
plot.title = element_text(size = rel(2), colour = "#000000", family = "Cambria", face="bold", hjust = 0),
text = element_text(size=rel(1), family="Source Serif Pro", colour = "#898a8c"),
plot.subtitle = element_text(size = rel(1.5), colour = "#525354", family="Cambria", hjust=0),
axis.title = element_blank(),
axis.text = element_text(size = rel(1.1), margin=margin(0,0,0,0, unit="pt")),
axis.ticks = element_line(size = rel(0.5), colour = "#878787"),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(5, "points"),
axis.line.x = element_line(colour = "#878787", size = rel(0.5)),
#Format backgrounds + panels
panel.background = element_rect(linetype = 0),
panel.border = element_blank(),
panel.grid.major = element_line(colour = "#e0e1e2", size = rel(0.5)),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
plot.caption = element_text(family="Source Serif Pro", colour = "#898a8c", size = rel(0.8), hjust = 0)
)
}
library(InewsTheme)
library(InewsTheme)
install.packages(c("backports", "BH", "bitops", "blogdown", "bookdown", "Boom", "BoomSpikeSlab", "broom", "bsts", "Cairo", "car", "caret", "clipr", "coda", "coin", "colorspace", "conquer", "covr", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "diffobj", "digest", "dplyr", "DT", "e1071", "fansi", "farver", "fastmap", "forcats", "foreach", "Formula", "freetypeharfbuzz", "gdtools", "generics", "ggplot2", "ggrepel", "ggthemes", "git2r", "glue", "gower", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "hunspell", "inline", "inum", "ipred", "isoband", "iterators", "jsonlite", "knitr", "labeling", "later", "lava", "libcoin", "lme4", "loo", "lubridate", "magrittr", "maptools", "MatrixModels", "matrixStats", "mime", "ModelMetrics", "modelr", "modeltools", "multcomp", "mvtnorm", "nycflights13", "openssl", "openxlsx", "packrat", "party", "partykit", "pbkrtest", "pillar", "plyr", "pROC", "promises", "purrr", "quantreg", "R.cache", "R.methodsS3", "R.oo", "R.utils", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "recipes", "relaimpo", "reprex", "reshape2", "rex", "rio", "rmarkdown", "rpart.plot", "rprojroot", "rsconnect", "runjags", "rvest", "sandwich", "scales", "servr", "shiny", "sp", "SparseM", "spelling", "SQUAREM", "StanHeaders", "statmod", "stringi", "survey", "sys", "systemfonts", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "V8", "vctrs", "vdiffr", "viridisLite", "xfun", "xml2", "xmlparsedata", "xts", "zoo"))
uninstall.package(InewsTHeme)
remove.packages(InewsTheme)
detach("package:InewsTheme", unload=TRUE)
devtools::load_all("C:/Users/Tom/Inews/InewsTheme")
library(InewsTheme)
library(InewsTheme)
renv::rebuild("InewsTheme", recursive = TRUE)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
devtools::document()
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(grid)
library(extrafont)
library(scales)
library(Cairo)
library(stats)
#' Rolling Average
#' @param n The number of days to execute rolling average over
ra <- function(x, n = 7){stats::filter(x, rep(1 / n, n), sides = 2)}
#' Inews Pallette
inews_pal <- function() {
values <- c("#E33A11","#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#fdbf6f","#cab2d6","#6a3d9a", "#ffff99", "#b15928")
max_n <- length(values)
f <- scales::manual_pal(values)
attr(f, "max_n") <- max_n
f
}
#'Inews Colour scale
scale_colour_inews <- function(...) {
discrete_scale("colour", "inews", inews_pal(), ...)
}
#'Inews fill scale
scale_fill_inews <- function(...) {
discrete_scale("fill", "inews", inews_pal(), ...)
}
#' Inews basic theme
#'
#' @param base_size Basic size of graph, defaults to 25
#' @param base_family base font family, not implemented
theme_inews_basic <- function(base_size = 25, base_family="") {
theme_minimal(base_size = base_size, base_family = base_family) %+replace%
theme(
#Plot/general
plot.margin = margin(t = 10,r = 10, b = 10,l =10, unit = "pt"),
#Format Legend
legend.title=element_blank(),
legend.position = "top",
legend.direction = "horizontal",
legend.justification = "left",
legend.spacing = unit(0, "points"),
legend.key.size = unit(1, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.margin = margin(t = 0,r = 0, b = 0,l =0, unit = "pt"),
legend.box.margin = margin(t = 5,r = 0, b = 0,l =0, unit = "pt"),
legend.box.spacing = unit(4, "points"),
legend.text = element_text(size = rel(0.9)),
#Formatting axis
axis.title = element_blank(),
axis.text = element_text(size = rel(0.7), margin=margin(0,0,0,0, unit="pt")),
axis.ticks = element_line(size = rel(0.7), colour = "#878787"),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(5, "points"),
axis.line.x = element_line(colour = "#878787", size = rel(0.5)),
#Format backgrounds + panels
panel.background = element_rect(linetype = 0),
panel.border = element_blank(),
panel.grid.major = element_line(colour = "#e0e1e2", size = rel(0.5)),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
#formatting text
plot.title = element_text(size = rel(1.5), colour = "#000000", family = "Bitter", face="bold", hjust = 0),
text = element_text(size=rel(1), family="Bitter", colour = "#898a8c"),
plot.subtitle = element_text(size = rel(1.1), colour = "#525354", family="Bitter", hjust=0, margin=margin(t=5)),
plot.caption = element_text(family="Bitter", colour = "#898a8c", size = rel(0.5), hjust = 0)
)
}
#' Inews ggparlaiment theme
#'
#' @param base_size Basic size of graph, defaults to 25
#' @param base_family base font family, not implemented
theme_inews_parl <- function(base_size = 25, base_family="") {
theme_void(base_size = base_size, base_family = base_family) %+replace%
theme(
#Format Legend
legend.title = element_blank(),
legend.position = "top",
legend.direction = "horizontal",
legend.justification = "left",
legend.spacing = unit(0, "points"),
legend.key.size = unit(1, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.margin = margin(t = 0, r = 5, b = 0, l = 5, unit = "pt"),
legend.box.margin = margin(t = 5, r = 0, b = 0, l = 0, unit = "pt"),
legend.box.spacing = unit(4, "points"),
legend.text = element_text(size = 10),
#Format plot (with margins)
plot.title.position = "panel",
plot.margin = margin(t = 0, r = 5, b = 0, l = 5, unit = "cm"),
#Format titles/text formatting
plot.title = element_text(size = rel(15), colour = "#000000", family = "Bitter", face = "bold", hjust = 0),
text = element_text(size = rel(1), family = "Bitter", colour = "#898a8c"),
plot.subtitle = element_text(size = rel(10), colour = "#525354", family = "Bitter", hjust = 0, margin=margin(t=5)),
plot.caption = element_text(family = "Bitter", colour = "#898a8c", size = rel(0.5), hjust = 0)
)
}
theme_inews_facet <- function(base_size = 25, base_family="") {
theme_inews_basic(base_size = base_size, base_family = base_family) %+replace%
theme(
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust=0.5)
)
}
#' Inews map theme
#'
#' @param base_size Basic size of graph, defaults to 25
#' @param base_family base font family, not implemented
theme_inews_map <- function(base_size = 25, base_family=""){
theme_void(base_size = 25, base_family = "") %+replace%
theme(
#Format legend
legend.title = element_blank(),
legend.position = "right",
legend.direction = "vertical",
legend.justification = "right",
legend.spacing = unit(0, "points"),
legend.key.size = unit(2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = "pt"),
legend.box.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = "pt"),
legend.box.spacing = unit(4, "points"),
legend.text = element_text(size = rel(0.9)),
#Format text elements
plot.title = element_text(size = rel(1.5), colour = "#000000", family = "Bitter", face = "bold",  hjust = 0),
text = element_text(size = rel(1), family = "Bitter", colour = "#898a8c"),
plot.subtitle = element_text(size = rel(1.1), colour = "#525354", family = "Bitter", hjust = 0, margin=margin(t=5)),
plot.caption = element_text(family = "Bitter", colour = "#898a8c", size = rel(0.5), hjust = 0),
#Add small margin
plot.margin = margin(t = 10,r = 10, b = 10,l =10, unit = "pt")
)
}
#' Save plots (ggsave wrapper)
#' @param filename The filename specified
#' @param plot The plot to render, defaults to last plot
#' @param width_i Specified width in cm, defaults to 15
#' @param height_i Specified height in cm, defaults to 10
#' @param type Adds presets for maps/parls and other types to render
#' @param l_size Enables to turn off limiting size
save_inews <- function(filename, plot=last_plot(), width_i = 15, height_i = 10, type="basic", l_size=TRUE){
# Add copyright
cap_all <- ggplot_build(plot)
cap <-  cap_all[[3]][[9]]$caption
newcap <- paste(cap, "© The I", sep="\n")
plot <- plot +
labs(caption = newcap)
# Add presets:
if (type == "map"){
height_i = 25
width_i = 25
} else if (type == "parl"){
height_i= 20
width_i = 20
}
ggsave(filename, plot, dpi = 300, type = "cairo", width = width_i, height = height_i, units = "cm", limitsize = l_size)
}
library(InewsTheme)
devtools::document()
library("tidyverse")
library(InewsTheme, verbose=TRUE)
library(Cairo)
library(ggalt)
library(gapminder)
mtcars <- mtcars %>%
mutate(
am = as.factor(am)
)
ggplot(data=mtcars,aes(x=hp, y=mpg, group = am, colour = am))+
geom_line(aes(group = am, colour = am), size = 1.5) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_inews_basic() +
labs(title = "Covid-19 Travel Restrictions", caption = "source:mtcars dataset \n © Inews") +
scale_colour_manual(labels=c("Amber List", "Green List", "Red List"), values=c("#f47702", "#17b50c", "#f41202"))
cap_all <- ggplot_build(plot)
cap_all <- ggplot_build(last_plot())
View(cap_all)
test <- layer_grob(last_plot())
View(test)
test <_ layer_scales(last_plot())
test <- layer_scales(last_plot())
View(test)
test <- layer_data(last_plot())
View(test)
ggplot(data=mtcars,aes(x=hp, y=mpg, group = am, colour = am))+
geom_line(aes(group = am, colour = am), size = 1.5) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_inews_basic() +
labs(title = "Covid-19 Travel Restrictions", caption = "source:mtcars dataset \n © Inews") +
scale_colour_manual(labels=c("Amber List RPEROIAPNOINARO{EAINROEAN", "Green List OERNAEINROAEINROAIENR", "Red List AIRNAEINRPAEINRPAIENRPIAERN"), values=c("#f47702", "#17b50c", "#f41202")) +
theme(
legend.key.height = units(2, "cm")
)
save_inews("test.png")
ggplot(data=mtcars,aes(x=hp, y=mpg, group = am, colour = am))+
geom_line(aes(group = am, colour = am), size = 1.5) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_inews_basic() +
labs(title = "Covid-19 Travel Restrictions", caption = "source:mtcars dataset \n © Inews") +
scale_colour_manual(labels=c("Amber List RPEROIAPNOINARO{EAINROEAN", "Green List OERNAEINROAEINROAIENR", "Red List AIRNAEINRPAEINRPAIENRPIAERN"), values=c("#f47702", "#17b50c", "#f41202")) +
theme(
legend.key.height = unit(2, "cm")
)
save_inews("test.png")
View(cap_all)
mtcars <- mtcars %>%
mutate(
am = as.factor(am)
)
find_name <- function(obj, name) {
# get all named paths through obj
find_paths <- function(obj, path) {
if ((!is.list(obj) && is.null(names(obj))) || identical(obj, .GlobalEnv)) {
return (path)
} else {
if (is.null(names(obj))) {
return(c(path,
lapply(seq_along(obj), function(x) find_paths(obj[[x]], paste0(path, "[[", x, "]]")))
))
} else {
return(c(path,
lapply(names(obj), function(x) find_paths(obj[[x]], paste(path, x, sep = "$")))
))
}
}
}
# get all the paths through the nested structure
all_paths <- unlist(find_paths(obj, deparse(substitute(obj))))
# find the requested name
path_to_name <- grep(paste0("\\$", name, "$"), all_paths, value = TRUE)
return (path_to_name)
}
find_name(cap_all, "Amber")
find_name(cap_all, "Amber List")
find_name(cap_all, "legend")
find_name(cap_all, "guide")
ggplot(data=mtcars,aes(x=hp, y=mpg, group = am, colour = am))+
geom_line(aes(group = am, colour = am), size = 1.5) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_inews_basic() +
labs(title = "Covid-19 Travel Restrictions", caption = "source:mtcars dataset \n © Inews") +
scale_colour_manual(labels=c("Amber List RPEROIAPNOINARO{EAINROEAN", "Green List OERNAEINROAEINROAIENR", "Red List AIRNAEINRPAEINRPAIENRPIAERN"), values=c("#f47702", "#17b50c", "#f41202")) +
theme(
legend.key.height = unit(2, "cm")
)
cap_all <- ggplot_build(last_plot())
find_name(cap_all, "Amber List RPEROIAPNOINARO{EAINROEAN")
ggplot(data=mtcars,aes(x=hp, y=mpg, group = am, colour = am))+
geom_line(aes(group = am, colour = am), size = 1.5) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_inews_basic() +
labs(title = "Covid-19 Travel Restrictions", caption = "source:mtcars dataset \n © Inews") +
scale_colour_manual(labels=c("Amber List", "Green List", "Red List AIRNAEINRPAEINRPAIENRPIAERN"), values=c("#f47702", "#17b50c", "#f41202")) +
theme(
legend.key.height = unit(2, "cm")
)
cap_all <- ggplot_build(last_plot())
find_name(cap_all, "Amber List RPEROIAPNOINARO{EAINROEAN")
find_name(cap_all, "Amber List")
find_name(cap_all, "Green List")
find_name(cap_all, "legend")
find_name(cap_all, "guide")
find_name(cap_all, "color")
find_name(cap_all, "colour")
cap_all$plot$labels$colour
cap_all$data[[1]]
find_name(cap_all, "labels")
find_na,e(cap_all, "discrete")
find_name(cap_all, "discrete")
find_name(cap_all, "manual")
t <- grid.ls(grid.force(cap_all))
library("grid")
t <- grid.ls(grid.force(cap_all))
t <- ggplotGrob(cap_all)
t <- ggplotGrob(last_plot())
grid.ls(grid.force(t))
rev <- grid.ls(grid.force(t))
View(rev)
rev$name
get_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
get_legend((last_plot()))
t <- get_legend((last_plot()))
View(t)
g1 <- function(a.gplot){
if (!gtable::is.gtable(a.gplot))
a.gplot <- ggplotGrob(a.gplot)
leg <- which(sapply(a.gplot$grobs, function(x) x$name) == "guide-box")
a.gplot$grobs[[leg]]
}
g1(last_plot())
grob <- grid::makeContent(layer_grob(last_plot(), 2)[[1]])$children
grob <- grid::makeContent(layer_grob(last_plot(), 2)
grob <- grid::makeContent(layer_grob(last_plot(), 2)[[1]])$children
grob <- grid::makeContent(layer_grob(last_plot(), 2)[[1]])$children
labels <- unname(vapply(ggplotGrob(last_plot()), function(x){x$label}, character(1)))
labels <- unname(vapply(ggplotGrob(last_plot()), function(x){x$guide-box}, character(1)))
test <- gtable_filter(ggplot_gtable(ggplot_build(last_plot())), "guide-box")
library("gtable")
test <- gtable_filter(ggplot_gtable(ggplot_build(last_plot())), "guide-box")
View(test)
View(test)
grobTree(test.label)
grobTree(test.labels)
grobTree(test.names)
grobTree(test.colour)
grobTree(test)
grobTree(test.name)
get_legend <- function(p, position = NULL){
if(is.null(p)) return(NULL)
if(!is.null(position)){
p <- p + theme(legend.position = position)
}
tmp <- ggplot_gtable(ggplot_build(p))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
if(length(leg) > 0) leg <- tmp$grobs[[leg]]
else leg <- NULL
leg
}
get_legend(last_plot())
