find_name(cap_all, "Amber List")
find_name(cap_all, "legend")
find_name(cap_all, "guide")
ggplot(data=mtcars,aes(x=hp, y=mpg, group = am, colour = am))+
geom_line(aes(group = am, colour = am), size = 1.5) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_inews_basic() +
labs(title = "Covid-19 Travel Restrictions", caption = "source:mtcars dataset \n © Inews") +
scale_colour_manual(labels=c("Amber List RPEROIAPNOINARO{EAINROEAN", "Green List OERNAEINROAEINROAIENR", "Red List AIRNAEINRPAEINRPAIENRPIAERN"), values=c("#f47702", "#17b50c", "#f41202")) +
theme(
legend.key.height = unit(2, "cm")
)
cap_all <- ggplot_build(last_plot())
find_name(cap_all, "Amber List RPEROIAPNOINARO{EAINROEAN")
ggplot(data=mtcars,aes(x=hp, y=mpg, group = am, colour = am))+
geom_line(aes(group = am, colour = am), size = 1.5) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_inews_basic() +
labs(title = "Covid-19 Travel Restrictions", caption = "source:mtcars dataset \n © Inews") +
scale_colour_manual(labels=c("Amber List", "Green List", "Red List AIRNAEINRPAEINRPAIENRPIAERN"), values=c("#f47702", "#17b50c", "#f41202")) +
theme(
legend.key.height = unit(2, "cm")
)
cap_all <- ggplot_build(last_plot())
find_name(cap_all, "Amber List RPEROIAPNOINARO{EAINROEAN")
find_name(cap_all, "Amber List")
find_name(cap_all, "Green List")
find_name(cap_all, "legend")
find_name(cap_all, "guide")
find_name(cap_all, "color")
find_name(cap_all, "colour")
cap_all$plot$labels$colour
cap_all$data[[1]]
find_name(cap_all, "labels")
find_na,e(cap_all, "discrete")
find_name(cap_all, "discrete")
find_name(cap_all, "manual")
t <- grid.ls(grid.force(cap_all))
library("grid")
t <- grid.ls(grid.force(cap_all))
t <- ggplotGrob(cap_all)
t <- ggplotGrob(last_plot())
grid.ls(grid.force(t))
rev <- grid.ls(grid.force(t))
View(rev)
rev$name
get_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
get_legend((last_plot()))
t <- get_legend((last_plot()))
View(t)
g1 <- function(a.gplot){
if (!gtable::is.gtable(a.gplot))
a.gplot <- ggplotGrob(a.gplot)
leg <- which(sapply(a.gplot$grobs, function(x) x$name) == "guide-box")
a.gplot$grobs[[leg]]
}
g1(last_plot())
grob <- grid::makeContent(layer_grob(last_plot(), 2)[[1]])$children
grob <- grid::makeContent(layer_grob(last_plot(), 2)
grob <- grid::makeContent(layer_grob(last_plot(), 2)[[1]])$children
grob <- grid::makeContent(layer_grob(last_plot(), 2)[[1]])$children
labels <- unname(vapply(ggplotGrob(last_plot()), function(x){x$label}, character(1)))
labels <- unname(vapply(ggplotGrob(last_plot()), function(x){x$guide-box}, character(1)))
test <- gtable_filter(ggplot_gtable(ggplot_build(last_plot())), "guide-box")
library("gtable")
test <- gtable_filter(ggplot_gtable(ggplot_build(last_plot())), "guide-box")
View(test)
View(test)
grobTree(test.label)
grobTree(test.labels)
grobTree(test.names)
grobTree(test.colour)
grobTree(test)
grobTree(test.name)
get_legend <- function(p, position = NULL){
if(is.null(p)) return(NULL)
if(!is.null(position)){
p <- p + theme(legend.position = position)
}
tmp <- ggplot_gtable(ggplot_build(p))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
if(length(leg) > 0) leg <- tmp$grobs[[leg]]
else leg <- NULL
leg
}
get_legend(last_plot())
library(InewsTheme)
ggplot(data=mtcars,aes(x=hp, y=mpg, group = am, fill = am))+
geom_line(aes(group = am, colour = am), size = 1.5) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_inews_basic() +
labs(title = "Covid-19 Travel Restrictions", caption = "source:mtcars dataset \n © Inews") +
scale_colour_manual(labels=c("Amber List Amber ListAmber ListAmber ListAmber ListAmber List", "Green ListAmber ListAmber ListAmber ListAmber ListAmber ListAmber ListAmber List "), values=c("#f47702", "#17b50c"))
library("tidyverse")
library(InewsTheme, verbose=TRUE)
library(Cairo)
library(ggalt)
library(gapminder)
ggplot(data=mtcars,aes(x=hp, y=mpg, group = am, fill = am))+
geom_line(aes(group = am, colour = am), size = 1.5) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_inews_basic() +
labs(title = "Covid-19 Travel Restrictions", caption = "source:mtcars dataset \n © Inews") +
scale_colour_manual(labels=c("Amber List Amber ListAmber ListAmber ListAmber ListAmber List", "Green ListAmber ListAmber ListAmber ListAmber ListAmber ListAmber ListAmber List "), values=c("#f47702", "#17b50c"))
mtcars <- mtcars %>%
mutate(
am = as.factor(am)
)
ggplot(data=mtcars,aes(x=hp, y=mpg, group = am, fill = am))+
geom_line(aes(group = am, colour = am), size = 1.5) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_inews_basic() +
labs(title = "Covid-19 Travel Restrictions", caption = "source:mtcars dataset \n © Inews") +
scale_colour_manual(labels=c("Amber List Amber ListAmber ListAmber ListAmber ListAmber List", "Green ListAmber ListAmber ListAmber ListAmber ListAmber ListAmber ListAmber List "), values=c("#f47702", "#17b50c"))
inews_save("test.png")
save_inews("test.png")
library(InewsTheme)
ggplot(data=mtcars,aes(x=hp, y=mpg, group = am, fill = am))+
geom_line(aes(group = am, colour = am), size = 1.5) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_inews_basic() +
labs(title = "Covid-19 Travel Restrictions", caption = "source:mtcars dataset \n © Inews") +
scale_colour_manual(labels=c("Amber List Amber ListAmber ListAmber ListAmber ListAmber List", "Green ListAmber ListAmber ListAmber ListAmber ListAmber ListAmber ListAmber List "), values=c("#f47702", "#17b50c"))
save_inews("test.png")
library(InewsTheme)
save_inews("test.png")
ggplot(data=mtcars,aes(x=hp, y=mpg, group = am, fill = am))+
geom_line(aes(group = am, colour = am), size = 1.5) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_inews_basic() +
labs(title = "Covid-19 Travel Restrictions", caption = "source:mtcars dataset \n © Inews") +
scale_colour_manual(labels=c("Amber List Amber ListAmber ListAmber ListAmber ListAmber List", "Green ListAmber ListAmber ListAmber ListAmber ListAmber ListAmber ListAmber List "), values=c("#f47702", "#17b50c"))
save_inews("test.png")
library(tidyverse)
library(InewsTheme)
ggplot(data=mtcars,aes(x=hp, y=mpg, group = am, fill = am))+
geom_line(aes(group = am, colour = am), size = 1.5) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_inews_basic() +
labs(title = "Covid-19 Travel Restrictions", caption = "source:mtcars dataset \n © Inews") +
scale_colour_manual(labels=c("Amber List Amber ListAmber ListAmber ListAmber ListAmber List", "Green ListAmber ListAmber ListAmber ListAmber ListAmber ListAmber ListAmber List "), values=c("#f47702", "#17b50c"))
t <- grid.ls(grid.force(cap_all))
save_inews("test.png")
save_inews <- function(filename, plot=last_plot(), width_i = 15, height_i = 10, type="basic", l_size=TRUE){
cap_all <- ggplot_build(plot)
################ Auto Formatting Legends ###############
plotAndPrintRatio <- function(g, width, height) {
gGrob <- ggplotGrob(g)
tmpfile <- tempfile(pattern = "png")
png(tmpfile, width = width, height = height, units="cm", res=300) # it is necessary to open a device
plot(g)
legendSize <- as.numeric(convertWidth(grobWidth(gGrob$grobs[[15]]), unitTo = "inches"))
plotSize <-   as.numeric(convertWidth(grobWidth(gGrob$grobs[[7]]), unitTo = "inches"))
# the ratio of legend size to plot size
dev.off()
return(legendSize / plotSize)
}
val <- plotAndPrintRatio(plot, width_i, height_i)
if(val > 1){
rows = ceiling(val)
pos_tps <- names(cap_all[[3]][[9]])
if ("colour" %in% pos_tps){
plot <- plot + guides(colour = guide_legend(nrow = rows))
}
if ("fill" %in% pos_tps){
plot <- plot + guides(fill = guide_legend(nrow = rows))
}
if ("size" %in% pos_tps){
plot <- plot + guides(size = guide_legend(nrow = rows))
}
if ("linetype" %in% pos_tps){
plot <- plot + guides(linetype = guide_legend(nrow = rows))
}
if ("alpha" %in% pos_tps){
plot <- plot + guides(alpha = guide_legend(nrow = rows))
}
}
# Add copyright
cap <-  cap_all[[3]][[9]]$caption
cap <- paste(cap, "By Tom Saunders", sep="\n")
newcap <- paste(cap, "© The I", sep="\n")
plot <- plot +
labs(caption = newcap)
# Add presets:
if (type == "map"){
height_i = 25
width_i = 25
} else if (type == "parl"){
height_i= 20
width_i = 20
}
ggsave(filename, plot, dpi = 300, type = "cairo", width = width_i, height = height_i, units = "cm", limitsize = l_size)
}
mtcars <- mtcars %>%
mutate(
am = as.factor(am)
)
ggplot(data=mtcars,aes(x=hp, y=mpg, group = am, fill = am))+
geom_line(aes(group = am, colour = am), size = 1.5) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_inews_basic() +
labs(title = "Covid-19 Travel Restrictions", caption = "source:mtcars dataset \n © Inews") +
scale_colour_manual(labels=c("Amber List Amber ListAmber ListAmber ListAmber ListAmber List", "Green ListAmber ListAmber ListAmber ListAmber ListAmber ListAmber ListAmber List "), values=c("#f47702", "#17b50c"))
save_inews("test.png")
library(grid)
save_inews <- function(filename, plot=last_plot(), width_i = 15, height_i = 10, type="basic", l_size=TRUE){
cap_all <- ggplot_build(plot)
################ Auto Formatting Legends ###############
plotAndPrintRatio <- function(g, width, height) {
gGrob <- ggplotGrob(g)
tmpfile <- tempfile(pattern = "png")
png(tmpfile, width = width, height = height, units="cm", res=300) # it is necessary to open a device
plot(g)
legendSize <- as.numeric(convertWidth(grobWidth(gGrob$grobs[[15]]), unitTo = "inches"))
plotSize <-   as.numeric(convertWidth(grobWidth(gGrob$grobs[[7]]), unitTo = "inches"))
# the ratio of legend size to plot size
dev.off()
return(legendSize / plotSize)
}
val <- plotAndPrintRatio(plot, width_i, height_i)
if(val > 1){
rows = ceiling(val)
pos_tps <- names(cap_all[[3]][[9]])
if ("colour" %in% pos_tps){
plot <- plot + guides(colour = guide_legend(nrow = rows))
}
if ("fill" %in% pos_tps){
plot <- plot + guides(fill = guide_legend(nrow = rows))
}
if ("size" %in% pos_tps){
plot <- plot + guides(size = guide_legend(nrow = rows))
}
if ("linetype" %in% pos_tps){
plot <- plot + guides(linetype = guide_legend(nrow = rows))
}
if ("alpha" %in% pos_tps){
plot <- plot + guides(alpha = guide_legend(nrow = rows))
}
}
# Add copyright
cap <-  cap_all[[3]][[9]]$caption
cap <- paste(cap, "By Tom Saunders", sep="\n")
newcap <- paste(cap, "© The I", sep="\n")
plot <- plot +
labs(caption = newcap)
# Add presets:
if (type == "map"){
height_i = 25
width_i = 25
} else if (type == "parl"){
height_i= 20
width_i = 20
}
ggsave(filename, plot, dpi = 300, type = "cairo", width = width_i, height = height_i, units = "cm", limitsize = l_size)
}
mtcars <- mtcars %>%
mutate(
am = as.factor(am)
)
ggplot(data=mtcars,aes(x=hp, y=mpg, group = am, fill = am))+
geom_line(aes(group = am, colour = am), size = 1.5) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_inews_basic() +
labs(title = "Covid-19 Travel Restrictions", caption = "source:mtcars dataset \n © Inews") +
scale_colour_manual(labels=c("Amber List Amber ListAmber ListAmber ListAmber ListAmber List", "Green ListAmber ListAmber ListAmber ListAmber ListAmber ListAmber ListAmber List "), values=c("#f47702", "#17b50c"))
save_inews("test.png")
inews_fill_steps<- function(..., values = NULL, pallete = "blue", width = NULL, colours = NULL, breaks = NULL, space = "Lab", na.value = "grey50",
guide = "coloursteps", aesthetics = "fill"){
find_origin <- function(x_range, width, boundary) {
shift <- floor((x_range[1] - boundary) / width)
boundary + shift * width
}
# Detect Pallette
if (is.null(colours)){
if (pallette == "blue"){
colours = c("#0D5750","#176F79","#247598","#3474b4","#54A5C1","#73CCCE","#94DACA","#B4E6CF")
}
}
# Compute Breaks
if (is.null(breaks)){
if (is.null(width)) {
message("Must specify either breaks or break size")
}
width = as.numeric(width)
boundary <- width / 2
x_range <- range(values, na.rm = TRUE, finite = TRUE)
min_x <- find_origin(x_range, width, boundary)
max_x <- max(x, na.rm = TRUE) + (1 - 1e-08) * width
breaks <- seq(min_x, max_x, width)
}
binned_scale(aesthetics, "stepsn",
gradient_n_pal(colours, values, space), na.value = na.value, guide = guide, breaks = breaks, ...)
}
devtools::document()
library(InewsTheme)
combn(c((1,2,3,4)))
combn(c((1,2,3,4)), 2)
combn(c(1,2,3,4), 2)
library(ggplot2)
cut_number(c(1,2,3,4,5), 2)
cut_number(c(1,2,3,4,5), 3)
cut_number(c(1,2,3,4,5), 4)
split(c(1,2,3,4,5,6), 2)
split(c(1,2,3,4,5,6), 5)
x <- c(1,2,3,4,5,6,7)
n <- 2
split(x,cut(seq_along(x),n,labels = FALSE))
n <- 3
split(x,cut(seq_along(x),n,labels = FALSE))
combn(x.n)
combn(x,n)
library(classInt)
r = rnorm(100)
classIntervals?
n = rnorm(100)
n = rnorm(100)
t = classIntervals(t, n, style = "jenks")
t = classIntervals(t, 5, style = "jenks")
t = classIntervals(x, 2, style = "jenks")
View(t)
t[brks]
t["brks"]
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
install.packages('emojifont')
library(emojifont)
library(InewsTheme)
capabilities()["cairo"]
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
directlabels:::dl.trans
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
devtools::install_github('r-lib/ragg')
install.packages(c("cli", "colorspace", "dplyr", "glue", "igraph", "rlang", "tibble", "utf8"))
install.packages(c("cli", "colorspace", "dplyr", "glue", "igraph", "rlang", "tibble", "utf8"))
devtools::install_github('r-lib/ragg')
devtools::install_github('r-lib/ragg')
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
install.packages('ragg')
install.packages('systemfonts')
install.packages('textshaping')
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
systemfonts::registry_fonts()
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
rstudioapi::addTheme("https://raw.githubusercontent.com/lusignan/rstudio-ariake-dark/main/ariake-dark.rstheme", apply = TRUE)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
devtools::install_github("r-lib/svglite")
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
library(InewsTheme)
